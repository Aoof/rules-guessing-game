<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
    <title>Rule Guessing Game</title>
    <style>
        body {
            background-image: radial-gradient( circle farthest-corner at -5.6% -6.8%,  #673191 37.3%, rgba(50,0,129,1) 73.5% );
            height: 100vh;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            align-content: center;
            overflow: hidden;

            font-family: "Inter", sans-serif;
            font-optical-sizing: auto;
            font-weight: 100;
            font-style: normal;
        }

        #rulePrompt {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 30px;
            font-size: 1.5rem;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.18);
            max-width: 800px;
            margin: 0 auto;
            position: relative;
            overflow: hidden;
        }

        #rulePrompt.error {
            color: red;
            background: rgba(255, 0, 0, 0.1);
        }

        #rerollBtn {
            position: absolute;
            bottom: -64px;
            right: 0;
            z-index: 100;
            background: #7c3aed;
            color: white;
            font-weight: 600;
            padding: 12px 24px;
            font-size: 1.1rem;
            border-radius: 16px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.12);
            cursor: pointer;
            transition: background 0.2s;
        }

        #rerollBtn:hover {
            background: #5b21b6;
        }

        .tag-select-container {
            position: absolute;
            top: -64px;
            right: 0;
            left: 0;
            z-index: 200;
            display: flex;
            gap: 8px;
            background: rgba(255,255,255,0.08);
            border-radius: 12px;
            padding: 10px 18px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.08);
            align-items: center;
        }
        .tag-checkbox {
            accent-color: #7c3aed;
            margin-right: 4px;
        }
        .tag-label {
            color: #fff;
            font-size: 0.95rem;
            font-weight: 500;
            margin-right: 12px;
            cursor: pointer;
            user-select: none;
        }
    </style>
</head>
<body>
    <div class="text-center transition-all duration-300 ease-in-out scale-100" id="ruleContainer" style="position:relative;">
        <div class="tag-select-container" id="tagSelectContainer">
            <label class="tag-label"><input type="checkbox" class="tag-checkbox" value="in-person">In-Person</label>
            <label class="tag-label"><input type="checkbox" class="tag-checkbox" value="voice-only">Voice-Call</label>
        </div>
        <h1 class="text-4xl font-bold text-white mb-4">Welcome to the Rule Guessing Game</h1>
        <h5 class="text-lg font-semibold text-white mb-8">Press the button below to get your rule</h5>
        <button class="bg-purple-600 text-white font-semibold py-2 px-4 text-xl rounded-xl shadow-xl cursor-pointer hover:bg-purple-700" id="getRuleBtn">
            Get Rule
        </button>
    </div>
    <div class="relative flex" id="rerollContainer" style="position:relative;">
        <button id="rerollBtn" style="display:none;">Reroll</button>
    </div>
</body>

<script>
    let ruleContainer = document.getElementById('ruleContainer');
    let rulePrompt = document.createElement('div');
    let tagSelectContainer = document.getElementById('tagSelectContainer');
    let rerollContainer = document.getElementById('rerollContainer');
    const rerollBtn = document.getElementById('rerollBtn');

    rulePrompt.className = 'text-lg font-semibold text-white mb-8 scale-0 transition-transform duration-300 ease-in-out hidden flex flex-col';
    rulePrompt.id = 'rulePrompt';

    function getSelectedTags() {
        const checkboxes = tagSelectContainer.querySelectorAll('input[type="checkbox"]:checked');
        return Array.from(checkboxes).map(cb => cb.value);
    }

    document.getElementById('rerollContainer').insertBefore(rulePrompt, rerollBtn);
    async function fetchRule() {
        let response = "Loading rule...";
        try {
            let selectedTags = getSelectedTags();

            const res = await fetch('/get-rule?tags=' + selectedTags.join(','));
            const data = await res.json();

            if (!data.success) {
                throw new Error(data.content || 'Failed to fetch rule');
            }
            const mainDiv = document.createElement('div');
            mainDiv.className = 'flex flex-col gap-2';
            mainDiv.textContent = data.content.text;

            const footerDiv = document.createElement('div');
            if (data.content.tags.length > 0) {
                footerDiv.className = 'mt-8 pt-4 border-t border-white/20 flex flex-wrap gap-2 items-center text-xs';
            }

            const infoDiv = document.createElement('div');
            infoDiv.className = 'text-white/70 text-xs flex flex-col items-left gap-2';

            const constSpan = document.createElement('span');
            constSpan.className = 'mr-4';
            constSpan.textContent = 'Situational: Whenever you think is right (but don\'t overdo it we\'re cutting you some slack)';

            const inPersonSpan = document.createElement('span');
            inPersonSpan.textContent = 'In-Person: You may use this rule in a physical setting';

            const voiceSpan = document.createElement('span');
            voiceSpan.textContent = 'Voice-Call: You may use this rule in a voice chat';

            const descSpan = document.createElement('span');
            descSpan.className = 'my-2 w-full text-left text-xs text-white/70';
            descSpan.textContent = data.content.description;

            if (data.content.description != "") {
                mainDiv.appendChild(descSpan);
            }

            if (data.content.tags.includes('non-constant')) {
                infoDiv.appendChild(constSpan);
            }

            if (data.content.tags.includes('in-person')) {
                infoDiv.appendChild(inPersonSpan);
            }

            if (data.content.tags.includes('voice-only')) {
                infoDiv.appendChild(voiceSpan);
            }

            footerDiv.appendChild(infoDiv);

            rulePrompt.innerHTML = '';
            rulePrompt.appendChild(mainDiv);
            rulePrompt.appendChild(footerDiv);
        } catch (error) {
            console.error('Error fetching rule:', error);
            rulePrompt.textContent = error;
            rulePrompt.classList.add('error');
        }
        ruleContainer.classList.add('scale-0');
        ruleContainer.classList.remove('scale-100');
        setTimeout(() => {
            ruleContainer.classList.add('hidden');
            rulePrompt.classList.remove('hidden');
            rulePrompt.classList.add('scale-100');
            rerollBtn.style.display = 'block';
            rerollContainer.insertBefore(tagSelectContainer, rerollBtn);
        }, 300);
    }

    document.getElementById('getRuleBtn').addEventListener('click', fetchRule);
    rerollBtn.addEventListener('click', fetchRule);
</script>

</html>